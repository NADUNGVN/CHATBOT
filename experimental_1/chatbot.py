from pymilvus import Collection, connections
from langchain_together import TogetherEmbeddings
from dotenv import load_dotenv
import os

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ t·ªáp .env
load_dotenv()

# Kh·ªüi t·∫°o c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ t·ªáp .env
ZILLIZ_URI = f"https://{os.getenv('ZILLIZ_HOST')}"
ZILLIZ_TOKEN = os.getenv('ZILLIZ_API_KEY')

# Kh·ªüi t·∫°o embedding model
TOGETHER_API_KEY = os.getenv('TOGETHER_API_KEY_2')
embedding_model = TogetherEmbeddings(
    model="togethercomputer/m2-bert-80M-32k-retrieval",
    together_api_key=TOGETHER_API_KEY
)

# K·∫øt n·ªëi t·ªõi Zilliz
def test_zilliz_connection():
    try:
        # K·∫øt n·ªëi t·ªõi Zilliz
        print("üîç K·∫øt n·ªëi Zilliz t·∫°i", ZILLIZ_URI)
        connections.connect(alias="default", uri=ZILLIZ_URI, token=ZILLIZ_TOKEN)

        # Ch·ªçn collection c·∫ßn ki·ªÉm tra
        collection = Collection("tthc_vectors")

        # Hi·ªÉn th·ªã schema c·ªßa collection
        print("üìã Schema c·ªßa collection 'tthc_vectors':")
        schema = collection.schema

        # In ra c√°c tr∆∞·ªùng trong schema
        print("C√°c tr∆∞·ªùng d·ªØ li·ªáu trong schema:")
        for field in schema.fields:
            print(f"Field Name: {field.name}, Type: {field.dtype}")

        # Th·ª±c hi·ªán t√¨m ki·∫øm tr√™n to√†n b·ªô collection ƒë·ªÉ l·∫•y 5 k·∫øt qu·∫£ ng·∫´u nhi√™n
        print("\nüîç L·∫•y 5 k·∫øt qu·∫£ ng·∫´u nhi√™n t·ª´ Zilliz:")

        # T·∫°o m·ªôt truy v·∫•n th·ª±c t·∫ø (embedding) thay v√¨ vector ng·∫´u nhi√™n
        query = "th·ªß t·ª•c h√†nh ch√≠nh"
        query_embedding = embedding_model.embed_query(query)  # L·∫•y embedding t·ª´ m√¥ h√¨nh

        # Ki·ªÉm tra k√≠ch th∆∞·ªõc c·ªßa query_embedding
        print(f"K√≠ch th∆∞·ªõc c·ªßa query_embedding: {len(query_embedding)}")

        # Th·ª±c hi·ªán t√¨m ki·∫øm tr√™n collection
        results = collection.search(
            data=[query_embedding], 
            anns_field="embedding",  # Tr∆∞·ªùng l∆∞u tr·ªØ vector nh√∫ng
            param={"metric_type": "L2", "params": {"nprobe": 20}},
            limit=5,  # L·∫•y t·ªëi ƒëa 5 k·∫øt qu·∫£
            output_fields=["id", "content", "ten_thu_tuc", "linh_vuc", "section_name"]  # C√°c tr∆∞·ªùng c·∫ßn l·∫•y
        )

        # Hi·ªÉn th·ªã 5 k·∫øt qu·∫£ ng·∫´u nhi√™n v√† ki·ªÉm tra c·∫•u tr√∫c c·ªßa 'Hit'
        for i, result in enumerate(results[0]):  # L·∫•y k·∫øt qu·∫£ t·ª´ search
            print(f"--- K·∫øt qu·∫£ #{i+1} ---")
            # Truy xu·∫•t c√°c thu·ªôc t√≠nh c·ªßa 'Hit' ƒë√∫ng c√°ch
            print(f"Ki·ªÉu c·ªßa result: {type(result)}")  # Ki·ªÉu c·ªßa ƒë·ªëi t∆∞·ª£ng result

            # Truy xu·∫•t ID v√† kho·∫£ng c√°ch t·ª´ ƒë·ªëi t∆∞·ª£ng 'Hit'
            print(f"ID: {result.id}")
            print(f"Distance: {result.distance}")

            # Truy xu·∫•t c√°c tr∆∞·ªùng trong 'entity' t·ª´ 'Hit'
            entity = result.entity
            print(f"T√™n th·ªß t·ª•c: {entity['ten_thu_tuc'] if 'ten_thu_tuc' in entity else 'Kh√¥ng c√≥ t√™n th·ªß t·ª•c'}")
            print(f"Content: {entity['content'][:100] if 'content' in entity else 'Kh√¥ng c√≥ n·ªôi dung'}...")  # In ra 100 k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa content
            print(f"Lƒ©nh v·ª±c: {entity['linh_vuc'] if 'linh_vuc' in entity else 'Kh√¥ng c√≥ lƒ©nh v·ª±c'}")
            print(f"Ph·∫ßn m·ª•c: {entity['section_name'] if 'section_name' in entity else 'Kh√¥ng c√≥ ph·∫ßn m·ª•c'}")
            print("="*50)

        # Ng·∫Øt k·∫øt n·ªëi
        connections.disconnect(alias="default")

    except Exception as e:
        print("‚ùå L·ªói k·∫øt n·ªëi ho·∫∑c truy v·∫•n:", e)

# Ch·∫°y th·ª≠ nghi·ªám ki·ªÉm tra schema v√† l·∫•y 5 k·∫øt qu·∫£ ng·∫´u nhi√™n
test_zilliz_connection()
